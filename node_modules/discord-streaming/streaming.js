/*
	Streamers Highligh Module for DiscordJS
	Author: Flisher (andre@jmle.net)

1.4.1 Added logic to skip when the user is a bot. Credit to stoozy for reporting the bug.
1.4.0 Added Try-Catch, more NodeJS Linting and Beautification
1.3.2 more NodeJS Linting
1.3.1 NoseJS Linting and fixed error message related to required role
1.2.0 Improved collection.find to the new format (remove deprecation warning in discord.js v11.4 and prepare for v12)
1.1.1 Bugfix on a crashing condition when presence can't be read properly
1.0.6 Improved README.md instructions  
1.0.5 Updating README.me code sample to properly load the module
1.0.4 Updating README.me code sample  
1.0.2 Removed a console.log debug message  
1.0.1 Fixed some typos  
1.0.0 Initial publish  

// Todo: 

*/

module.exports = function (bot, options) {
	const cron = require('node-cron');

	const description = {
		name: `discord-playing`,
		filename: `playing.js`,
		version: `1.4.1`
	}
	// Add check on startup
	bot.on("ready", () => {
		console.log(`Module: ${description.name} -> Loaded version ${description.version} from ("${description.filename}")`)
		StreamingCheck(bot, options);
	});

	// Add a Cron job every minutes
	let jobStreamingCheck = new cron.schedule('* * * * *', function () {
		/* Runs every minutes */
		StreamingCheck(bot, options);
	});



	function StreamingCheck() {
		// bot, options
		if (options && options.live) {
			// Single Server Config, will default to first guild found in the bot
			let guild = bot.guilds.first();
			StreamersLive(guild, options)
			StreamersNotLive(guild, options)
		} else {
			// Multi-Servers Config
			for (let key in options) {
				// check that guild is loaded			
				let guild = bot.guilds.get(key);
				if (guild) {
					StreamersLive(guild, options[key])
					StreamersNotLive(guild, options[key])
				} else {
					console.log(`${description.name} -> Bot isn't connected to Guild "${key}"`)
				}
			}
		}
	}

	function StreamersLive(guild, options) {
		// Check if the bot can manage Roles for this guild
		if (guild.me.hasPermission("MANAGE_ROLES")) {
			// Loop trough presence to find streamers (type 1)
			let presences = guild.presences;
			if (presences) {
				presences.forEach(function (element, key) {
					if (element.game) {
						if (typeof (element.game.type) != undefined) {
							 if (element.game.type == 0) {
								// key = user id
								console.log(element.game.type);
								let member = guild.members.get(key)
								// console.log(member);
								// Check if the "live" Role exist
								if (guild.roles.find(val => val.name === options.live)) {
									// Check if the position of the "live" role is managable by the bot
									if (guild.me.highestRole.position >= guild.roles.find(val => val.name === options.live).position) {
										// Check if there is a Role required in the configuration
										let bypass = false;
										if (typeof (options.required) === "undefined") {
											// If there is no required role, bypass

											bypass = true;
										} else {
											// Check if the required role exist and log an error message if missing
											if (!guild.roles.find(val => val.name === options.required)) {

												console.log(`StreamersLive - REQUIRED Role "${options.required}" doesn't exist on Guild "${guild.name}" (${guild.id})`);
											}

										}
										if (!member.user.bot&&(bypass || (member.roles.find(val => val.name === options.required)))) {

											// Check if the member doesn't already have the live role
											if (!(member.roles.find(val => val.name === options.live))) {												
												try {
													member.addRole(guild.roles.find(val => val.name === options.live)).catch(console.error);
													console.log("A LIVE HAS STARTED");
				
												} catch (err) {
													console.error(err)
												}
											}
										}
									} else {
										console.log(`${description.name} -> LIVE Role "${options.required}" is higher than the bot highest permission on Guild "${guild.name}" (${guild.id})`);
									}
								} else {
									console.log(`${description.name} -> LIVE Role "${options.live}" doesn't exist on Guild "${guild.name}" (${guild.id})`);
								}
							}
						}
					}
				});
			}
		} else {
			console.log(`${description.name} -> Bot doesn't have "MANAGE_ROLES" permission on Guild "${guild.name}" (${guild.id})`);
		}
	}

	function StreamersNotLive(guild, options) {
		// Check if the bot can manage Roles for this guild
		if (guild.me.hasPermission("MANAGE_ROLES")) {
			// Check if the live Role exist
			if (guild.roles.find(val => val.name === options.live)) {
				// Check if the position of the "live" role is managable by the bot
				if (guild.me.highestRole.position >= guild.roles.find(val => val.name === options.live).position) {
					// Loop les membres du Role Live pour ret
					let streamers = guild.roles.find(val => val.name === options.live).members
					streamers.forEach(function (member, key) {
						let stillStreaming = 0;
						let presence = member.guild.presences.get(key);
						if (presence) {
							if (presence.game) {
								if (typeof (presence.game.type) != undefined) {
									
									if (presence.game.type === 0) {
										stillStreaming = 1;
									}
								}
							}
							if (stillStreaming == 0) {
								try {
									member.removeRole(guild.roles.find(val => val.name === options.live)).catch(console.error);
									console.log("A LIVE HAS ENDED");

								} catch (err) {
									console.error(err)
								}
							}
						}
					});
				} else {
					console.log(`${description.name} -> LIVE Role "${options.live}" is higher than the bot highest permission on Guild "${guild.name}" (${guild.id})`);
				}
			} else {
				console.log(`${description.name} -> LIVE Role "${options.live}" doesn't exist on Guild "${guild.name}" (${guild.id})`);
			}
		} else {
			console.log(`${description.name} -> Bot doesn't have "MANAGE_ROLES" permission on Guild "${guild.name}" (${guild.id})`);
		}
	}
}